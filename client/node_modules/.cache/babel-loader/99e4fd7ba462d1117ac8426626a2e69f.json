{"ast":null,"code":"export const ADD_PRODUCT = 'ADD_PRODUCT';\nexport const REMOVE_PRODUCT = 'REMOVE_PRODUCT';\nexport const FETCH_INIT = 'FETCH_INIT';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\n\nconst addProductToCart = (product, state) => {\n  const updatedCart = [...state.cart];\n  const updatedItemIndex = updatedCart.findIndex(item => item._id === product._id);\n\n  if (updatedItemIndex < 0) {\n    updatedCart.push({ ...product,\n      quantity: 1\n    });\n  } else {\n    const updatedItem = { ...updatedCart[updatedItemIndex]\n    };\n    updatedItem.quantity++;\n    updatedCart[updatedItemIndex] = updatedItem;\n  } //make cart a string and store in local space\n\n\n  let stringCart = JSON.stringify(updatedCart);\n  localStorage.setItem(\"cart\", stringCart);\n  return { ...state,\n    cart: updatedCart\n  };\n};\n\nconst removeProductFromCart = (productId, state) => {\n  console.log('Removing product with id: ' + productId);\n  const updatedCart = [...state.cart];\n  const updatedItemIndex = updatedCart.findIndex(item => item._id === productId);\n  const cart = JSON.parse(localStorage.getItem(\"cart\"));\n  const updatedItem = { ...updatedCart[updatedItemIndex]\n  };\n  updatedItem.quantity--;\n\n  if (updatedItem.quantity <= 0) {\n    updatedCart.splice(updatedItemIndex, 1);\n    localStorage.setItem(\"cart\", JSON.stringify(cart.splice(updatedItemIndex, 1)));\n  } else {\n    updatedCart[updatedItemIndex] = updatedItem;\n  }\n\n  let cartString = JSON.stringify(updatedCart);\n  localStorage.setItem('cart', cartString);\n  return { ...state,\n    cart: updatedCart\n  };\n};\n\nconst fetchProducts = (products, state) => {\n  return { ...state,\n    products\n  };\n};\n\nexport const shopReducer = (state, action) => {\n  switch (action.type) {\n    case FETCH_SUCCESS:\n      return fetchProducts(action.products, state);\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        products: action.products\n      };\n\n    case ADD_PRODUCT:\n      return addProductToCart(action.product, state);\n\n    case REMOVE_PRODUCT:\n      return removeProductFromCart(action.productId, state);\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/DELL/Desktop/Backeryshop/client/src/context/reducers.js"],"names":["ADD_PRODUCT","REMOVE_PRODUCT","FETCH_INIT","FETCH_SUCCESS","FETCH_FAILURE","addProductToCart","product","state","updatedCart","cart","updatedItemIndex","findIndex","item","_id","push","quantity","updatedItem","stringCart","JSON","stringify","localStorage","setItem","removeProductFromCart","productId","console","log","parse","getItem","splice","cartString","fetchProducts","products","shopReducer","action","type","isLoading","isError"],"mappings":"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","sourcesContent":["export const ADD_PRODUCT = 'ADD_PRODUCT'\r\nexport const REMOVE_PRODUCT = 'REMOVE_PRODUCT'\r\nexport const FETCH_INIT = 'FETCH_INIT'\r\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS'\r\nexport const FETCH_FAILURE = 'FETCH_FAILURE'\r\nconst addProductToCart = (product, state) => {\r\n  const updatedCart = [...state.cart]\r\n  const updatedItemIndex = updatedCart.findIndex(item => item._id === product._id)\r\n  if (updatedItemIndex < 0) {\r\n    updatedCart.push({ ...product, quantity: 1 })\r\n  } else {\r\n    const updatedItem = {\r\n      ...updatedCart[updatedItemIndex],\r\n    }\r\n    updatedItem.quantity++\r\n    updatedCart[updatedItemIndex] = updatedItem\r\n  }\r\n  //make cart a string and store in local space\r\n  let stringCart = JSON.stringify(updatedCart);\r\n  localStorage.setItem(\"cart\", stringCart)\r\n  return { ...state, cart: updatedCart }\r\n}\r\nconst removeProductFromCart = (productId, state) => {\r\n  console.log('Removing product with id: ' + productId)\r\n  const updatedCart = [...state.cart]\r\n  const updatedItemIndex = updatedCart.findIndex(item => item._id === productId)\r\n  const cart =JSON.parse(localStorage.getItem(\"cart\"));\r\n  const updatedItem = {\r\n    ...updatedCart[updatedItemIndex],\r\n  }\r\n  updatedItem.quantity--\r\n  if (updatedItem.quantity <= 0) {\r\n    updatedCart.splice(updatedItemIndex, 1)\r\n    localStorage.setItem(\"cart\", JSON.stringify(cart.splice(updatedItemIndex, 1)));\r\n  } else {\r\n    updatedCart[updatedItemIndex] = updatedItem\r\n  }\r\n  let cartString = JSON.stringify(updatedCart)\r\n  localStorage.setItem('cart', cartString)\r\n  return { ...state, cart: updatedCart }\r\n}\r\nconst fetchProducts = (products, state) => {\r\n  return { ...state, products }\r\n}\r\nexport const shopReducer = (state, action) => {\r\n  switch (action.type) {\r\n   \r\n    case FETCH_SUCCESS:\r\n      return fetchProducts(action.products, state)\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: false,\r\n        products: action.products,\r\n      }\r\n  \r\n    case ADD_PRODUCT:\r\n      return addProductToCart(action.product, state)\r\n    case REMOVE_PRODUCT:\r\n      return removeProductFromCart(action.productId, state)\r\n    default:\r\n      return state\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}